// CD pipeline for Jenkins
// Build and deploy Swarm datastore with mysql DB on dedicated docker node (dev/prod)

// Required plugins:
// GitHub, Pipeline Utility Steps

pipeline {

    parameters {
        choice(name: 'DEPLOY', choices: ['dev', 'prod'], description: 'Select deployment environment')
    }
    
    
    agent any

    environment {
        // Get secrets from jenkins storage: DB root password, Swarm hostname and SSH password for user jenkins
        DB_PASS = credentials("swarm-datastore-${DEPLOY}")          // Swarm API Key from Jenkins secrets store
        SWARM_HOSTNAME = credentials("swarm-hostname-${DEPLOY}")    // Swarm node hostname from Jenkins secrets store
        SWARM_SSH_CRED = credentials("swarm-sshcred-${DEPLOY}")     // SSH Passwords for Swarm node from Jenkins secrets store
    }
    stages {
        stage('Set deploy params') {
            steps {
                script {
                    if (env.DEPLOY != 'dev' && env.DEPLOY != 'prod') {
                        echo 'Parameter not set, using default'
                        env.DEPLOY = 'dev'
                    }
                    env.CONFIGURATION = "pipeline/infrastructure-${DEPLOY}.conf"
                }
            }
        }
        stage('Checkout Code') {
            steps {
                git(
                    url: "https://github.com/xyhtac/tgbot-swarm",
                    branch: "${DEPLOY}",
                    credentialsId: "GH-PAT",
                    changelog: true,
                    poll: true
                )
                sh 'ls -la'
            }
        }
        stage ("Configure Pipeline") {
            steps {
                load "${CONFIGURATION}"
            }
        }
        stage("Generate Dockerfile") {
            steps {
                writeFile(
                    file: "datastore/Dockerfile",
                    text: """\
                        FROM mysql
                        ENV MYSQL_ROOT_PASSWORD ${DB_PASS}
                    """.stripIndent()
                )
            }
        }
        stage ("Recreate and deploy Docker container") {
            steps {
                // package code
                sh "tar -czvf deploy-package.tgz datastore"

                // perform next steps on remote swarm node via ssh
                script {
                    // define ssh client
                    def remote = [:]
                    remote.name = "db-${API_ID}-${DEPLOY}"
                    remote.host = "${SWARM_HOSTNAME}"
                    remote.user = 'jenkins'
                    remote.password = "${SWARM_SSH_CRED}"
                    remote.allowAnyHosts = true

                    // transfer code to swarm and unpack it
                    stage("Transfer application code") {
                        sshPut remote: remote, from: 'deploy-package.tgz', into: '/opt/jenkins'
                        sshCommand remote: remote, command: "cd /opt/jenkins && tar -xzvf deploy-package.tgz"
                    }
                    stage("Generate Docker image") {
                        sshCommand remote: remote, command: "cd /opt/jenkins/datastore && docker build -t ${API_ID}-datastore ."
                        sshCommand remote: remote, command: "rm /opt/jenkins/datastore -rf"
                        sshCommand remote: remote, command: "rm /opt/jenkins/deploy-package.tgz -f"
                    }
                    stage ("Restart Docker container") {
                        sshCommand remote: remote, command: "docker stop ${API_ID}-db || true && docker rm ${API_ID}-db -f || true"
                        sshCommand remote: remote, command: "docker run -d -p ${DB_PORT}:${DB_PORT} -e NODE_ENV=${DEPLOY} --restart unless-stopped --name ${API_ID}-db ${API_ID}-datastore -v mysql:/var/lib/mysql"
                        sshCommand remote: remote, command: "docker image prune -f && docker image ls && docker ps"
                        sshCommand remote: remote, command: "docker exec ${API_ID}-db ls -la"
                    }
                }
            }
        }
    }
    
}